
@using Kooboo.CMS.Content.Models;
@using Kooboo.CMS.Content.Query;
@{ var schema = (Kooboo.CMS.Content.Models.Schema)ViewData["Schema"];
    var allowedEdit = (bool)ViewData["AllowedEdit"];
    var allowedView = (bool)ViewData["AllowedView"];
    var parentUUID = ViewContext.RequestContext.AllRouteValues()["parentUUID"];
    var parentFolder=ViewContext.RequestContext.AllRouteValues()["parentFolder"];
}
@using(Html.BeginForm(ViewContext.RequestContext.AllRouteValues()["action"].ToString()
    , ViewContext.RequestContext.AllRouteValues()["controller"].ToString()
    , ViewContext.RequestContext.AllRouteValues()
    , FormMethod.Post
    , new RouteValueDictionary(new { enctype = "multipart/form-data" })))
{
    <table><tr>
            <th>
            <label for="Title">Title</label>
            </th>
            <td>
            <input class='long' id="Title" name="Title" type="text" value="@(Model.Title ?? "")" />            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["Title"], null)
            
            </td>          
            </tr><tr>
            <th>
            <label for="Summary">Summary</label>
            </th>
            <td>
            <textarea class="extra-large" name="Summary" >@(Model.Summary ?? "")</textarea>             
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["Summary"], null)
            
            </td>          
            </tr><tr>
            <th>
            <label for="Description">Description</label>
            </th>
            <td>
            <textarea name="Description" id="Description" class="Description tinymce" media_library_url="@Url.Action("Selection","MediaContent",ViewContext.RequestContext.AllRouteValues()))" media_library_title ="@("Selected Files".Localize())" rows="10" cols="100">@( Model.Description ?? "")</textarea>            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["Description"], null)
            
            </td>          
            </tr><tr>
            <th>
            <label for="Readings">Readings</label>
            </th>
            <td>
            <input class="long" id="Readings" name="Readings" type="text" value="@(Model.Readings ?? "")"  data-val-number="The field Readings must be a number." data-val="true"/>            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["Readings"], null)
            
            </td>          
            </tr><tr>
            <th>
            <label for="Image">Image</label>
            </th>
            <td>
            <input id="Image" name="Image" type="file" data-value="@(Model.Image ?? "")" class='filestyle' />            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["Image"], null)
            
            </td>          
            </tr>
<tr>
    <th>MutiFiles</th>
    <td>
        <div id="MutiFiles_Container" class="mediafile">
            <input id="MutiFiles" name="MutiFiles" type="hidden" value='@(Model.MutiFiles)' data-bind="value:fieldValue"/>
            <ul class="clearfix" data-bind="foreach:data">
                <!-- ko if: isImage -->
                <li class="img">
                    <span class="preview"></span>
                    <a class="action" data-bind="click: $parent.removeItem">@Html.IconImage("minus small")</a>
                    <img data-bind="attr:{src:Url}" height="100" width="100">
                </li>
                <!-- /ko -->
                <!-- ko ifnot: isImage -->
                <li>
                    <span class="left" data-bind="{text:FileName}"></span>
                    <a class="action right" data-bind="click: $parent.removeItem">@Html.IconImage("minus small")</a>
                </li>
                <!-- /ko -->
            </ul>
            <a class="action add" href='@Url.Action("Selection", ViewContext.RequestContext.AllRouteValues().Merge("Controller", "MediaContent").Merge("FolderName", null))")'>@Html.IconImage("plus small")</a>
            
        </div>
        <script>
            $(function () {
                function MediaFile_ViewModel(initValue) {
                    var self = this;
                    function getFileName(url) {
                        return _.last(url.split('/'));
                    }
                    function isImage(url) {
                        return /.jpg$|.png$|.gif$|.bmp$|.jpeg$/i.test(url);
                    }
                    var items = [];
                    _.each(initValue.split('|'), function (item) {
                        if (item != '') {
                            items.push({ Url: item, FileName: getFileName(item), isImage: isImage(item) });
                        }
                    });
                    self.data = ko.observableArray(items);
                    self.data.sort();
                    self.removeItem = function () {
                        self.data.remove(this);
                    };
                    self.addItem = function (url, fileName) {
                        if (_.findWhere(self.data(), { Url: url }) == undefined) {
                            self.data.push({ Url: url, FileName: fileName, isImage: isImage(url) });
                            self.data.sort();
                        }
                    };
                    self.fieldValue = ko.computed(function () {
                        var urls = [];
                        _.each(this.data(), function (item) {
                            urls.push(item.Url);
                        });
                        return urls.join('|');
                    }, this);
                }
                var mediaFileViewModel = new MediaFile_ViewModel('@(Model.MutiFiles)');
                var mediaFileTemplate = $('#MutiFiles_Container');
                ko.applyBindings(mediaFileViewModel, mediaFileTemplate[0]);

                mediaFileTemplate.find('a.add').click(function (e) {
                    e.preventDefault();
                    var $mediaLink = $(this);

                    $mediaLink.pop({
                        popupOnTop: true,
                        width: 700,
                        height: 500,
                        onclose: function () {
                            setTimeout(function () {
                                if ($.popContext.getCurrent() != null) {
                                    $.popContext.getCurrent().find('iframe').height('100%');
                                }
                            }, 16);
                        },
                        onload: function (currentHandle, pop, config) {
                            var iframe = pop.children('iframe'),
                            iframeSrc = iframe[0].contentWindow.document.location.href;
                            if (iframeSrc == 'about:blank') {
                                return false;
                            }
                            top.onFileSelected = function (src, text, option) {
                                mediaFileViewModel.addItem(src, text);
                            };
                        }
                    }).click();
                });
            });
        </script>
    </td>

</tr>

            @if (allowedEdit) {
                <tr>
            <th>
           
            </th>
            <td>
            <input id='Published' name="Published" type="checkbox" @(Convert.ToBoolean(Model.Published)?"checked":"") value="true"/>
                                    <input type="hidden" value="false" name="Published"/>
            <label class="inline" for="Published">Published</label>
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["Published"], null)
            </td>          
            </tr>
            }
    @Html.Action("Categories", ViewContext.RequestContext.AllRouteValues())
    
    </table>
}