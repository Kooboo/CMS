@model Kooboo.CMS.Sites.Models.Layout
@{
    var body = (Model == null || string.IsNullOrEmpty(Model.Body)) ? (string)(ViewBag.DefaultLayout == null ? "" : ViewBag.DefaultLayout.Template) : Model.Body;

    var viewEngine = (ITemplateEngine)(ViewData["ViewEngine"]);
    var viewEngineName = viewEngine.Name;
}
@Html.TextArea("Body", body, new { rows = 30, cols = 20 })
<div class="panel">
    <div class="block">
        <h6 class="title active">
            @Html.IconImage("arrow")
            @("Positions".Localize())</h6>
        <div id="positionsContainer" class="container">
            <ul class="positions">
                <!-- ko foreach: positions -->
                <li>
                    @Html.IconImage("minus small right", new RouteValueDictionary() { { "data-bind", "click:$parent.removePosition" } })
                    <!-- ko  text:$data -->
                    <!-- /ko -->
                </li>
                <!-- /ko -->
                <li data-bind="visible: $data.createNew()">
                    <input class="editor" id="newPositionName" type="text" data-bind="value: $data.newPositionName" />
                    <a class="action right" data-bind="click: $data.cancelAdd" title="@("Cancel".Localize())">@Html.IconImage("minus small")</a>
                    <a class="action right" data-bind="click: $data.insertPosition" title="@("Save".Localize())">@Html.IconImage("save small")</a>
                </li>
            </ul>
            <p class="actions clearfix" data-bind="visible: !$data.createNew()">
                <a class="action right" data-bind="click: $data.addPosition">@Html.IconImage("plus small")</a>
            </p>
        </div>
    </div>
    <div class="block plugins">
        @Html.EditorFor(m => m.Plugins)
    </div>
    <div class="block">
        <h6 class="title active">
            @Html.IconImage("arrow")
            @("Layout helper".Localize())</h6>
        <div class="container list">
            <ul>
                <li class="has-sub codeSample">
                    <span>
                        @Html.IconImage("arrow")
                        @("HTML header".Localize())
                    </span>
                    @(Html.Partial("CodeSnippets"))
                </li>
                <li class="has-sub layoutSamples">
                    <span>
                        @Html.IconImage("arrow")
                        @("Layouts".Localize())
                    </span>
                    @Html.Partial("LayoutSamples", ViewData["LayoutSamples"])
                </li>
                <li class="has-sub viewTools">
                    <span>
                        @Html.IconImage("arrow")
                        @("Add views".Localize())
                    </span>
                    @(Html.Partial("ViewList", Kooboo.CMS.Sites.Services.ServiceFactory.ViewManager.GetNamespace(Site.Current)))
                </li>
            </ul>
        </div>
    </div>
    @Html.Partial("CodeHelper")

</div>
<script>
    $(function () {
        @viewEngine.GetLayoutPositionParser().RegisterClientParser()
        @viewEngine.GetLayoutPositionParser().RegisterClientAddPosition() 
    @viewEngine.GetLayoutPositionParser().RegisterClientRemovePosition()
        var config = {
            positionInputDisplay: '@("Position Name".Localize())',
            positionNullAlert: '@("Please input a new position name.".Localize())',
            nameRepeat: '@("The position name already exists.".Localize())',
            wrongPosition: '@("The position name already exists.".Localize())',
            textAreaId: "#Body",
            removeText: '@("Remove".Localize())',
            removeConfirm: '@("Are you sure you want to remove this item?".Localize())',
            replaceConfirm: '@("Are you sure you want to replace this template?".Localize())'
        };
        function PositionViewModel() {
            var self = this;
            this.positions = ko.observableArray([]);
            this.createNew = ko.observable(false);
            this.newPositionName = ko.observable('');
            this.isValid = ko.observable(false);

            this.addPosition = function () {
                this.createNew(true);
            }
            this.insertPosition = function () {
                var positionName = this.newPositionName().trim();
                var isValid = positionName != '' && (_.indexOf(this.positions(), positionName) == -1);
                if (isValid) {
                    this.createNew(false);
                    this.newPositionName('');

                    var insert = getPositionCodeSnippet(positionName);
                    codeMirrorAPI.insertAtCursor(insert);
                    window.leaveConfirm.stop();
                }
                else {
                    $('#newPositionName').addClass('input-validation-error');
                }
            }
            this.cancelAdd = function () {
                this.createNew(false);
                this.newPositionName('');
            };
            this.removePosition = function (positionName) {
                self.positions.remove(positionName.toString());
                var code = codeMirrorAPI.getCode();
                var newCode = removePosition(positionName, code);
                codeMirrorAPI.init(newCode);
            }
        }
        var positionViewModel = new PositionViewModel();

        var textArea = $(config.textAreaId).codeMirror();

        var codeMirrorAPI = textArea.data("codeMirror");
        codeMirrorAPI.on('change', function (cm) {
            if (cm && cm.historySize().undo > 0) {
                window.leaveConfirm.stop();
            } else {
                window.leaveConfirm.pass();
            }
            syncPositions();
        });
        function syncPositions() {
            positionViewModel.positions.removeAll();
            _.each(getPositionList(codeMirrorAPI.getCode()), function (value) {
                positionViewModel.positions.push(value);
            });
        }
        syncPositions();
        ko.applyBindings(positionViewModel, $('#positionsContainer')[0]);


        (function initViewTools() {
            var viewTools = $("div.viewTools,li.viewTools");
            var hasSubLi = viewTools.find("li.has-sub");

            $(".common-form .panel .block").each(function (index) {
                var current = $(this);
                var content = current.find("div.container");

                var title = current.find(".title");
                title.click(function () {
                    title.toggleClass('active');
                    content.slideToggle("fast");
                });
                index++;
            });

            viewTools.find("a").click(function () {
                window.leaveConfirm.stop();
                var current = $(this);
                var codeMirrorAPI = textArea.data("codeMirror");
                var viewName = current.attr('title');
                if (viewName != undefined && viewName != "") {
                    var insert = current.attr('title');
                    codeMirrorAPI.insertAtCursor(insert);
                }
            });
        })();



        (function initCodeSample() {
            $("li.codeSample").find("a").click(function () {
                var current = $(this);
                var insert = $(this).attr("title");
                var codeMirrorAPI = textArea.data("codeMirror");
                codeMirrorAPI.insertAtCursor(insert);
            });
        })();

        (function () {
            $("li.layoutSamples").find("a").click(function () {
                if (!confirm(config.replaceConfirm)) {
                    return false;
                }
                var insert = $(this).attr("rel");

                var codeMirrorAPI = textArea.data("codeMirror");
                codeMirrorAPI.init(insert);
            });
        })();

        ///init Save
        (function initSave() {

            window.ajaxFormParam = {
                beforeSerialize: function ($form, options) {
                    window.leaveConfirm.pass();
                    var codeMirrorAPI = textArea.data("codeMirror");
                    var text = codeMirrorAPI.getText();
                    textArea.val(text);
                }
            };
        })();

        (function panelList() {
            $(".common-form .panel div.list").find(".has-sub > span").click(function () {
                $(this).parent().toggleClass('active');
                $(this).siblings('ul').slideToggle('fast');
            });
        })();
    })
</script>



